ext.configureLibrary = {
  final List<String> tags
    ->

  configureScala()
  configureMdoc()

  final String projectName = project.name
  final String projectDescription = project.description
  final String projectGroup = project.group
  final String projectArtifact = "opentorah-$projectName"
  final String projectVersion = project.version
  final String gitHubRepository = "opentorah/opentorah"
  final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
  final String codeUrl = "$gitHubRepositoryUrl/tree/master/$projectName"
  final String orgName = 'Open Torah'
  final String orgUrl = 'http://www.opentorah.org'

//  logger.lifecycle(
//    "Configuring Bintray for project '$projectName':\n" +
//    "  description=$projectDescription;\n" +
//    "  groupId    =$projectGroup;\n" +
//    "  codeUrl    =$codeUrl;\n" +
//    "  artifactId =$projectArtifact;\n"
//  )

  // Gradle plugin [publishing?] plugin, if it is applied, adds tasks publishPluginJar and
  // publishPluginJavaDocsJar that create sources and javadoc archives;
  // attempts to use them as artifacts in the Maven publication failed,
  // so I make my own, replacing javadoc with ScalaDoc :)

  task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
  }

  task scaladocJar(type: Jar) {
    from scaladoc.destinationDir
    archiveClassifier.set('scaladoc')
  }
  scaladocJar.dependsOn scaladoc

  jar.archiveBaseName.set(projectArtifact)

  publishing {
    publications {
      bintrayMavenPublication(MavenPublication) {
        groupId projectGroup
        artifactId projectArtifact
        version projectVersion

        from components.java

        artifact sourceJar
        // TODO didn't work for Scala 2.13 in Gradle 6.0...
        artifact scaladocJar

        pom {
          name = projectName
          description = projectDescription
          url = codeUrl
          scm {
            url = "$gitHubRepositoryUrl"
            connection = "scm:git:git://github.com/${gitHubRepository}.git"
            developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
          }
          licenses {
            license {
              name = 'The Apache Software License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution = 'repo'
              comments = 'A business-friendly OSS license'
            }
          }
          organization {
            name = orgName
            url = orgUrl
          }
          developers {
            developer {
              id = 'dub'
              name = 'Leonid Dubinsky'
              email = 'dub@podval.org'
              url = 'http://dub.podval.org'
              organization = 'Podval Group'
              organizationUrl = 'http://www.podval.org'
              timezone = '-5'
            }
          }
        }
      }
    }
  }

  bintray {
    user         = 'dubinsky'
    key          = findProperty('bintrayApiKey')
    publications = ['bintrayMavenPublication']
    dryRun       = false
    publish      = true
    override     = true
    pkg {
      repo                  = projectGroup
      name                  = projectArtifact
      desc                  = projectDescription
      websiteUrl            = codeUrl
      issueTrackerUrl       = "${gitHubRepositoryUrl}/issues"
      vcsUrl                = "${gitHubRepositoryUrl}.git"
      githubRepo            = gitHubRepository
      licenses              = ['Apache-2.0']
      labels                = tags
      publicDownloadNumbers = true
      // Note: there seems to be no way to supply per-module CHANGELOG.md -
      // and package creation fails unless there is an overall one...
      githubReleaseNotesFile= 'CHANGELOG.md'
      version { name        = projectVersion }
    }
  }
}

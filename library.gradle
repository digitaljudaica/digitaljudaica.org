ext.configureLibrary = {
  configureScala()
  configureMdoc()

  final String gitHubRepository = "opentorah/opentorah"
  final String gitHubRepositoryUrl = "https://github.com/$gitHubRepository"
  final String orgName = 'Open Torah Project'
  final String orgUrl = 'http://www.opentorah.org'

  jar {
    // From https://github.com/GoogleContainerTools/jib/tree/master/examples/multi-module
    //   Since this library is included as a jar in our jib projects, we want the jar to built reproducibly.
    preserveFileTimestamps false
    reproducibleFileOrder true

    // Because why not?
    manifest {
      attributes(
        'Implementation-Title'  : project.description,
        'Implementation-Version': project.version
      )
    }
  }

  task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set('sources')
  }

  task scaladocJar(type: Jar) {
    from scaladoc.destinationDir
    archiveClassifier.set('scaladoc')
  }
  scaladocJar.dependsOn(scaladoc)

  // there is no Java in the project, but Maven Central requires javadoc JAR...
  task javadocJar(type: Jar) {
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
  }
  javadocJar.dependsOn(javadoc)

  final boolean isPublishingEnabled =
          (findProperty('mavenCentralUsername') != null) &&
          (findProperty('mavenCentralPassword') != null)

  if (!isPublishingEnabled) logger.lifecycle('Publishing disabled - no Maven Central properties') else {
    publishing {
      repositories {
        maven {
          name = 'mavenCentral'
          url = version.endsWith('SNAPSHOT') ?
                  'https://oss.sonatype.org/content/repositories/snapshots' :
                  'https://oss.sonatype.org/service/local/staging/deploy/maven2'

          credentials {
            username = mavenCentralUsername
            password = mavenCentralPassword
          }
        }
      }

      publications {
        library(MavenPublication) {
          from components.java
          artifact sourcesJar
          artifact scaladocJar
          artifact javadocJar

          pom {
            name = project.name
            description = project.description
            url = "$gitHubRepositoryUrl/tree/master/$project.name"
            scm {
              url = "$gitHubRepositoryUrl"
              connection = "scm:git:git://github.com/${gitHubRepository}.git"
              developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
            }
            licenses {
              license {
                name = 'The Apache Software License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution = 'repo'
                comments = 'A business-friendly OSS license'
              }
            }
            organization {
              name = orgName
              url = orgUrl
            }
            developers {
              developer {
                id = 'dub'
                name = 'Leonid Dubinsky'
                email = 'dub@opentorah.org'
                organization = orgName
                organizationUrl = orgUrl
                timezone = '-5'
              }
            }
          }
        }
      }
    }

    signing {
      useInMemoryPgpKeys(getProperty('gnupg.dub-opentorah-org.key'), getProperty('gnupg.dub-opentorah-org.password'))
      sign publishing.publications.library
    }

    task uploadLibrary
    uploadLibrary.description('Upload artifacts')
    uploadLibrary.group('publishing')
    uploadLibrary.dependsOn(publishLibraryPublicationToMavenCentralRepository)

    upload.dependsOn(uploadLibrary)
  }
}

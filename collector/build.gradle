plugins {
  id 'java-library'
  id 'scala'
  id 'com.github.maiflai.scalatest'
  id 'maven-publish'
  id 'com.jfrog.bintray'
  id 'com.google.cloud.tools.jib'
}

description = 'Archive Collector'

configureLibrary(['Scala', 'Jewish', 'TEI'])

dependencies {
  implementation project(':store')
  implementation project(':util')

  implementation "com.vladsch.flexmark:flexmark:$flexmarkVersion"
  implementation "com.vladsch.flexmark:flexmark-ext-toc:$flexmarkVersion"
//  implementation "com.vladsch.flexmark:flexmark-util-ast:$flexmarkVersion"
//  implementation "com.vladsch.flexmark:flexmark-util-data:$flexmarkVersion"
  implementation "ch.qos.logback:logback-classic:$logbackVersion"

  testImplementation "org.podval.tools:org.podval.tools.run:$podvalRunVersion"
}

configureService()

// TODO even unfolding jib {} here instead of calling configureJib() did not help IntelliJ Idea feel it
// and make JIB builder available for Cloud Code | Cloud Run | Run Locally Run conficuration...
//configureJib(
//  'alter-rebbe-2',
//  'collector',
//  'us-east4',
//  'org.opentorah.collector.Service',
//  1
//)

final String gcloudProject = 'alter-rebbe-2'
final String gcloudService = 'collector'
final String serviceImage  = "gcr.io/$gcloudProject/$gcloudService"
final String mainClassName = 'org.opentorah.collector.Service'

// TODO look into `providers.credentials(org.gradle.api.credentials.PasswordCredentials, 'login')`...
final String gcloudServiceAccountProperty = 'gcloudServiceAccountKey_' + gcloudProject.replace('-', '_')
final String gcloudServiceAccountKey      = findProperty(gcloudServiceAccountProperty) ?: System.getenv(gcloudServiceAccountProperty)

jib {
  to {
    auth {
      username = '_json_key'
      password = gcloudServiceAccountKey
    }
    image = serviceImage
  }
  container {
    mainClass = mainClassName
  }
}

deploy.dependsOn('jib')

deploy.doLast {
  exec {
    standardInput new ByteArrayInputStream(gcloudServiceAccountKey.getBytes('UTF-8'))
    commandLine 'gcloud', 'auth', 'activate-service-account', '--key-file', '-'
  }

  exec {
    commandLine 'gcloud', 'run', 'deploy', gcloudService, '--image', serviceImage
  }
}

ext.configureService = {
  configureScala()

  dependencies {
    implementation "dev.zio:zio_$scalaVersionMajor:$zioVersion"
    implementation "dev.zio:zio-interop-cats_$scalaVersionMajor:$zioInteropCatsVersion"
    implementation "org.typelevel:cats-core_$scalaVersionMajor:$catsVersion"
    implementation "org.typelevel:cats-effect_$scalaVersionMajor:$catsEffectVersion"

    implementation "org.http4s:http4s-dsl_$scalaVersionMajor:$http4sVersion"
    implementation "org.http4s:http4s-blaze-server_$scalaVersionMajor:$http4sVersion"
    implementation "org.http4s:http4s-blaze-client_$scalaVersionMajor:$http4sVersion"

    runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
    implementation "net.logstash.logback:logstash-logback-encoder:$logstashVersion"
  }
}

ext.configureJib = {
  final String gcloudProject,
  final String gcloudService,
  final String gcloudRegion,
  final String mainClassName
  ->

  // TODO look into `providers.credentials(org.gradle.api.credentials.PasswordCredentials, 'login')`...
  final String gcloudServiceAccountProperty = 'gcloudServiceAccountKey_' + gcloudProject.replace('-', '_')
  final String gcloudServiceAccountKey = findProperty(gcloudServiceAccountProperty) ?: System.getenv(gcloudServiceAccountProperty)
  final String serviceImage  = "gcr.io/$gcloudProject/$gcloudService"

  jib {
    to {
      auth {
        username = '_json_key'
        password = gcloudServiceAccountKey
      }
      image = serviceImage
    }
    container {
      mainClass = mainClassName
    }
  }

  deploy.dependsOn('jib')
  deploy.doLast {
    exec {
      standardInput new ByteArrayInputStream(gcloudServiceAccountKey.getBytes('UTF-8'))
      commandLine 'gcloud', 'auth', 'activate-service-account', '--key-file', '-'
    }
    exec { commandLine(
      'gcloud', 'run', 'deploy', gcloudService,
      '--image', serviceImage,
      '--allow-unauthenticated',
      '--platform', 'managed',
      '--region', gcloudRegion
    )}
  }
}

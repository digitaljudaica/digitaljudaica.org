buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'saxon:saxon:6.5.3'
        classpath 'xerces:xercesImpl:2.11.0'
        classpath 'org.apache.xmlgraphics:fop:2.2@jar' // TODO drop jar and see if the dependencies are correct
        classpath 'org.apache.xmlgraphics:batik-transcoder:1.9' // exclude fop!
        classpath 'org.apache.avalon.framework:avalon-framework-impl:4.3.1'
//        classpath 'net.sf.xslthl:xslthl:2.1.0'
    }
}

import com.icl.saxon.TransformerFactoryImpl
import org.apache.fop.apps.Fop
import org.apache.fop.apps.FopConfParser
import org.apache.fop.apps.MimeConstants
import org.apache.xerces.jaxp.SAXParserFactoryImpl
import org.xml.sax.InputSource
import org.xml.sax.XMLReader

import javax.xml.parsers.SAXParserFactory
import javax.xml.transform.Result
import javax.xml.transform.Source
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerFactory
import javax.xml.transform.sax.SAXResult
import javax.xml.transform.sax.SAXSource
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.stream.StreamSource

task buildScriptDependencies(type: DependencyReportTask) {
    configurations = project.buildscript.configurations
}

def docbook    = "${buildDir}/docbook"
def xsl        = "${buildDir}/xsl"
def fo         = "${buildDir}/fo/index.fo"

task docbookHtml(type: Docbook, dependsOn: [prepareDocBook]) {
    def html = "${buildDir}/html"

    description = 'DocBook -> chunked HTML'
    sourceDirectory = file("${docbook}")
    outputFile = file("${html}/index.html")
    stylesheet = file("${xsl}/html.xsl")

    doLast {
        copy { from "src/main/images" into "${html}/images" }
        copy { from "src/main/css"    into "${html}/css"    }
        copy { from "src/main/js"     into "${html}/js"     }
    }
}

task docbookPdfPrepare(type: Docbook, dependsOn: [prepareDocBook]) {
    description = 'DocBook -> FO'
    sourceDirectory = file("${docbook}")
    outputFile = file("${fo}")
    stylesheet = file("${xsl}/pdf.xsl")
}

task docbookPdf(type: DocbookPdf, dependsOn: 'docbookPdfPrepare') {
    description = 'FO -> PDF'
    sourceFile = file("${fo}")
    outputFile = file("${buildDir}/pdf/index.pdf")
}

class Docbook extends DefaultTask {
    @InputDirectory
    File sourceDirectory

    @InputFile
    File stylesheet

    @OutputFile
    File outputFile

    @TaskAction
    final void transform() {
        // suppress output from the XSLT transforms - unless running with '-d' or '-i'.
        switch (project.gradle.startParameter.logLevel) {
            case LogLevel.DEBUG:
            case LogLevel.INFO:
                break;
            default:
                logging.captureStandardOutput(LogLevel.INFO)
                logging.captureStandardError(LogLevel.INFO)
        }

        SAXParserFactory factory = new SAXParserFactoryImpl();
        factory.setXIncludeAware(true);
        XMLReader reader = factory.newSAXParser().getXMLReader();
        def transformerFactory = new TransformerFactoryImpl();

        File srcFile = new File(sourceDirectory, "index.xml");
        InputSource inputSource = new InputSource(srcFile.getAbsolutePath());

        outputFile.getParentFile().mkdirs();
        Result result = new StreamResult(outputFile.getAbsolutePath());

        URL url = stylesheet.toURI().toURL();
        Source source = new StreamSource(url.openStream(), url.toExternalForm());
        def transformer = transformerFactory.newTransformer(source);

        String rootFilename = outputFile.getName();
        rootFilename = rootFilename.substring(0, rootFilename.lastIndexOf('.'));
        transformer.setParameter("root.filename", rootFilename);
        transformer.setParameter("base.dir", outputFile.getParent() + File.separator);
        transformer.transform(new SAXSource(reader, inputSource), result);
    }
}

class DocbookPdf extends DefaultTask {
    @InputFile
    File sourceFile;

    @OutputFile
    File outputFile;

    @TaskAction
    final void transform() {
        OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile));

        try {
            Fop fop = new FopConfParser(
                new File(project.getProjectDir().getAbsolutePath() + '/src/main/fop/fop.xconf')
            ).getFopFactoryBuilder().build().newFop(MimeConstants.MIME_PDF, out);

            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer transformer = factory.newTransformer();

            Source src = new StreamSource(sourceFile);
            Result res = new SAXResult(fop.getDefaultHandler());

            transformer.transform(src, res);
        } finally {
            out.close();
        }
    }
}

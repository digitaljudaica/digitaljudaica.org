/*
 * Inspired by a Gist by Aristedes Maniatis
 * https://gist.github.com/ari/4156d967d54289f4abf6
 */
buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        // Saxon-HE had support for XSLT 1.0 up to v9.7, then dropped it, then - allegedly - reinstated it
        // by popular demand in v9.8.0.7. It doesn't seem fixed to me; when I use v9.8.0-10, I see a lot of
        //   "Static error... XPST0008: Variable... has not been declared (or its declaration is not in scope),
        // but when I use v9.7.0-21 - I do not.
        //
        // But it still doesn't work; I get (from DocBook XSLT):
        //   Don't know how to chunk with Saxonica
        //   Error at char 16 in xsl:value-of/@select on line 84 column 63 of chunker.xsl:
        //   XTMM9000: Processing terminated by xsl:message at line 84 in chunker.xsl
        // It seems that the extensions that DocBook XSLT stylesheets use to produce multiple output files are
        // not supported even by Saxon-HE versions that supports XSLT 1.0.
        //
        // I'll need to dongrade to Saxon 6.5.5 :(
        classpath 'net.sf.saxon:Saxon-HE:9.7.0-21'
        classpath 'xerces:xercesImpl:2.11.0'

        classpath 'org.apache.xmlgraphics:fop:2.2@jar'
        classpath 'org.apache.xmlgraphics:xmlgraphics-commons:2.2'
        classpath 'org.apache.xmlgraphics:batik-bridge:1.9@jar'
//        classpath 'org.apache.xmlgraphics:batik-css:1.8@jar'
//        classpath 'org.apache.xmlgraphics:batik-dom:1.8'
        classpath 'org.apache.xmlgraphics:batik-transcoder:1.9' // exclude fop!
        classpath 'org.apache.xmlgraphics:batik-gvt:1.9'
//        classpath 'org.apache.xmlgraphics:batik-svggen:1.8'
        classpath 'org.apache.xmlgraphics:batik-svg-dom:1.9@jar'
        classpath 'org.apache.avalon.framework:avalon-framework-impl:4.3.1'

        classpath 'net.sf.xslthl:xslthl:2.1.0'

        classpath('xml-apis:xml-apis:1.4.01') {
            force = true
        }
    }
}

configurations {
    docbookxslt
}

dependencies {
    // v1.79.2 has been released for a while, but doesn't seem to have made it into Mavrn repositories...
    docbookxslt 'net.sf.docbook:docbook-xsl:1.79.1:resources@zip'
}

import net.sf.saxon.TransformerFactoryImpl
import org.apache.fop.apps.*
import org.apache.tools.ant.filters.ReplaceTokens
import org.apache.xerces.jaxp.SAXParserFactoryImpl
import org.xml.sax.InputSource
import org.xml.sax.XMLReader

import javax.xml.parsers.SAXParserFactory
import javax.xml.transform.Result
import javax.xml.transform.Source
import javax.xml.transform.Transformer
import javax.xml.transform.TransformerFactory
import javax.xml.transform.sax.SAXResult
import javax.xml.transform.sax.SAXSource
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.stream.StreamSource
import java.time.LocalDate
import java.time.format.DateTimeFormatter

task buildScriptDependencies(type: DependencyReportTask) {
    configurations = project.buildscript.configurations
}

def docbookXsl = "${buildDir}/docbookXsl"
def docbook    = "${buildDir}/docbook"
def xsl        = "${buildDir}/xsl"
def fo         = "${buildDir}/fo/index.fo"

task explodeDocbookXsl {
    copy { from zipTree(configurations.docbookxslt.singleFile) into "${docbookXsl}" }
    copy { from "${docbookXsl}/docbook" into "${docbookXsl}" }
}

task copyXsl(type: Copy) { from "src/main/xsl" into "${xsl}"
    filter(ReplaceTokens, tokens: [ docbook: "${docbookXsl}".toString() ])
}

task copyDocbook(type: Copy) { from "src/main/docbook" into "${docbook}"
    filter(ReplaceTokens, tokens: [
        version     : version,
        date        : LocalDate.now().format(DateTimeFormatter.ofPattern("d MMM yyyy"))
    ])
}

task prepareDocbook(dependsOn: [explodeDocbookXsl, copyXsl, copyDocbook])

task docbookHtml(type: Docbook, dependsOn: [prepareDocbook]) {
    def html = "${buildDir}/html"

    description = 'DocBook -> chunked HTML'
    sourceDirectory = file("${docbook}")
    outputFile = file("${html}/index.html")
    stylesheet = file("${xsl}/html.xsl")

    doLast {
        copy { from "src/main/images" into "${html}/images" }
        copy { from "src/main/css"    into "${html}/css"    }
        copy { from "src/main/js"     into "${html}/js"     }
    }
}

task docbookPdfPrepare(type: Docbook, dependsOn: [prepareDocbook]) {
    description = 'DocBook -> FO'
    sourceDirectory = file("${docbook}")
    outputFile = file("${fo}")
    stylesheet = file("${xsl}/pdf.xsl")
}

task docbookPdf(type: DocbookPdf, dependsOn: 'docbookPdfPrepare') {
    description = 'FO -> PDF'
    sourceFile = file("${fo}")
    outputFile = file("${buildDir}/pdf/index.pdf")
}

class Docbook extends DefaultTask {
    @InputDirectory
    File sourceDirectory

    @InputFile
    File stylesheet

    @OutputFile
    File outputFile

    @TaskAction
    final void transform() {
        // suppress output from the XSLT transforms - unless running with '-d' or '-i'.
        switch (project.gradle.startParameter.logLevel) {
            case LogLevel.DEBUG:
            case LogLevel.INFO:
                break;
            default:
                logging.captureStandardOutput(LogLevel.INFO)
                logging.captureStandardError(LogLevel.INFO)
        }

        SAXParserFactory factory = new SAXParserFactoryImpl();
        factory.setXIncludeAware(true);
        XMLReader reader = factory.newSAXParser().getXMLReader();
        def transformerFactory = new TransformerFactoryImpl();

        File srcFile = new File(sourceDirectory, "index.xml");
        InputSource inputSource = new InputSource(srcFile.getAbsolutePath());

        outputFile.getParentFile().mkdirs();
        Result result = new StreamResult(outputFile.getAbsolutePath());

        URL url = stylesheet.toURI().toURL();
        Source source = new StreamSource(url.openStream(), url.toExternalForm());
        def transformer = transformerFactory.newTransformer(source);

        String rootFilename = outputFile.getName();
        rootFilename = rootFilename.substring(0, rootFilename.lastIndexOf('.'));
        transformer.setParameter("root.filename", rootFilename);
//        transformer.setParameter("base.dir", outputFile.getParent() + File.separator);
//        println("baseDir=" + outputFile.getParent())
        transformer.transform(new SAXSource(reader, inputSource), result);
    }
}

class DocbookPdf extends DefaultTask {
    @InputFile
    File sourceFile;

    @OutputFile
    File outputFile;

    @TaskAction
    final void transform() {
        FopFactory fopFactory = new FopConfParser(
            new File(project.getProjectDir().getAbsolutePath() + '/src/main/fop/fop.xml'),
            new File(project.getProjectDir().getAbsolutePath() + '/src').toURI()
        ).getFopFactoryBuilder().build();

        OutputStream out = new BufferedOutputStream(new FileOutputStream(outputFile));

        try {
            Fop fop = fopFactory.newFop(MimeConstants.MIME_PDF, out);

            TransformerFactory factory = TransformerFactory.newInstance();
            Transformer transformer = factory.newTransformer();

            Source src = new StreamSource(sourceFile);
            Result res = new SAXResult(fop.getDefaultHandler());

            transformer.transform(src, res);
        } finally {
            out.close();
        }
    }
}

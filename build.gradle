// TODO  scalacOptions ++= Seq("-Ypartial-unification") - for http4s

buildscript {
  repositories {
    // To function outside a composite, a plugin repository would be required.
  }
}

plugins {
  id "com.github.maiflai.scalatest" version "0.23" apply false
  id "com.jfrog.bintray" version "1.8.4" apply false

  // Scala.js support:   Scala.js/Gradle: https://github.com/gtache/scalajs-gradle ?

  /*
  I do not use 'com.bmuschko.docker-java-application' because I want to separate third-party dependencies in a
  different layer from the org.podval ones to speed up pushes.
  
  I do not use 'com.bmuschko.docker-remote-api' because I don't need to: Google Cloud Build step takes care
  of Docker image creation and push.
  
  If I did, this is how I'd do it:
    task buildDockerImage(type: com.bmuschko.gradle.docker.tasks.image.DockerBuildImage, dependsOn: prepareDockerContext) {
      group = "docker"
      inputDir = dockerDir
      tag = "gcr.io/calendar-service-1/service".toString()
    }
  
    id 'com.bmuschko.docker-remote-api' version '4.0.5' apply false
    id 'com.bmuschko.docker-java-application' version '4.0.5' apply false
  */
}

def scalaVersion      = '2.12.8'
def scalaVersionMajor = '2.12'
def http4sVersion     = '0.18.21' // '0.20.0-SNAPSHOT'

ext.lib = [
  zinc      : 'com.typesafe.zinc:zinc:0.3.15',
//  "org.scala-sbt:zinc_${scalaVersionMajor}:1.0.3"
  scala          : "org.scala-lang:scala-library:$scalaVersion",
  scalaXml       : "org.scala-lang.modules:scala-xml_$scalaVersionMajor:1.1.0",

  slf4jJdk       : "org.slf4j:slf4j-jdk14:1.7.25",

  http4sDsl      : "org.http4s:http4s-dsl_$scalaVersionMajor:$http4sVersion",
  http4sScalatags: "org.http4s:http4s-scalatags_$scalaVersionMajor:$http4sVersion",
  http4sServer   : "org.http4s:http4s-blaze-server_$scalaVersionMajor:$http4sVersion",
  http4sClient   : "org.http4s:http4s-blaze-client_$scalaVersionMajor:$http4sVersion",

  scalatags      : "com.lihaoyi:scalatags_$scalaVersionMajor:0.6.7",

  // add Circe when we need JSON: https://circe.github.io/circe/

  scalaCheck     : "org.scalacheck:scalacheck_${scalaVersionMajor}:1.14.0",
  scalaTest      : "org.scalatest:scalatest_${scalaVersionMajor}:3.0.5",
  pegdown        : 'org.pegdown:pegdown:1.6.0' // for scalatest reports
]

allprojects {
  repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
  }

  group = 'org.podval.calendar'
  version = '0.1.1'
}

def gitHubRepository    = "jewish-calendar/calendar"
def gitHubRepositoryUrl = "https://github.com/${gitHubRepository}"

def bintrayConfig = {
  user         = 'dubinsky'
  key          = findProperty('bintrayApiKey')
  publications = ['mavenPublication']
  dryRun       = false
  publish      = true
  override     = true
  pkg {
    repo                   = 'org.podval.calendar'
    name                   = project.jar.baseName
    desc                   = project.description
    websiteUrl             = "${gitHubRepositoryUrl}"
    issueTrackerUrl        = "${gitHubRepositoryUrl}/issues"
    vcsUrl                 = "${gitHubRepositoryUrl}.git"
    githubRepo             = gitHubRepository
    licenses               = ['Apache-2.0']
    labels                 = ['Scala', 'Calendar', 'Jewish']
    publicDownloadNumbers  = true
//    githubReleaseNotesFile = 'README.md'
    version { name         = project.version }
  }
}

subprojects {
  apply plugin: 'scala'
  apply plugin: 'com.github.maiflai.scalatest'
  apply plugin: 'maven-publish'
  apply plugin: 'com.jfrog.bintray'

  jar.baseName = "$project.group-$project.name"

  dependencies {
    zinc lib.zinc
    compile lib.scala
    testImplementation lib.scalaCheck, lib.scalaTest, lib.pegdown
  }

  test {
    testLogging {
      events = [org.gradle.api.tasks.testing.logging.TestLogEvent.FAILED]
    }
  }

  task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
  }

  publishing {
    publications {
      mavenPublication(MavenPublication) {
        groupId project.group
        artifactId jar.baseName

        from components.java
        artifact sourceJar

        pom {
          name = project.name
          description = project.description
          url = "${gitHubRepositoryUrl}"
          scm {
            url = "${gitHubRepositoryUrl}"
            connection = "scm:git:git://github.com/${gitHubRepository}.git"
            developerConnection = "scm:git:ssh://github.com/${gitHubRepository}.git"
          }
          licenses {
            license {
              name = 'The Apache Software License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution = 'repo'
              comments = 'A business-friendly OSS license'
            }
          }
          organization {
            name = 'Jewish Calendar'
            url = 'http://www.jewish-calendar.org'
          }
          developers {
            developer {
              id = 'dub'
              name = 'Leonid Dubinsky'
              email = 'dub@podval.org'
              url = 'http://dub.podval.org'
              organization = 'Podval Group'
              organizationUrl = 'http://www.podval.org'
              timezone = '-5'
            }
          }
        }
      }
    }
  }
}

apply plugin: 'idea'

idea {
  project {
    jdkName = '1.8'
    vcs = 'Git'
  }

  module {
    excludeDirs += [
      file('.idea'),
      file('gradle')
    ]
  }
}

project(':library') {
  dependencies {
    compile lib.scalaXml
  }

  description = 'Jewish Calendar Dates.' 

  bintray bintrayConfig
}

project(':service') {
  description = 'Jewish Calendar Service.'

  apply plugin: 'application'

  dependencies {
    compile project(':library')
    compile lib.http4sDsl, lib.http4sServer, lib.http4sClient
    compile lib.scalatags
    // http4s -> Scalatags bridge, when included as a dependency, confuses the imports;
    // doing explicit conversions for now :)    
    //    compile lib.http4sScalatags
    implementation lib.slf4jJdk
  }

  bintray bintrayConfig

  mainClassName = 'org.podval.calendar.service.CalendarService'

  def dockerDir = file("$buildDir/docker/")

  task prepareDockerContext {
    group = "docker"
    dependsOn installDist

    doLast {
      copy { from "$installDist.destinationDir/lib" into "$dockerDir/project-libs" include "**/org.podval.*" }
      copy { from "$installDist.destinationDir/lib" into "$dockerDir/dependencies" exclude "**/org.podval.*" }
      copy { from "$installDist.destinationDir/bin" into "$dockerDir/bin" }
      copy { from "$projectDir/Dockerfile" into dockerDir }
    }
  }
}
